# ===========================================
# verify_signature.py
# Ki·ªÉm tra ch·ªØ k√Ω PDF (chu·∫©n pyHanko 0.31+)
# ===========================================

from pyhanko.pdf_utils.reader import PdfFileReader
from pyhanko.sign.validation import validate_pdf_signature
from pyhanko.sign.validation.status import format_pretty_print_details
from pyhanko_certvalidator import ValidationContext
from datetime import datetime
from asn1crypto import x509 as asn1_x509
from asn1crypto import pem as asn1_pem
import argparse
import json
import os

# === ƒê∆Ø·ªúNG D·∫™N ===
PDF_PATH = r"E:\Bai2_Baomat\signed.pdf"
CERT_PATH = r"E:\Bai2_Baomat\keys\signer_cert.pem"

def parse_args():
    p = argparse.ArgumentParser(description="X√°c minh ch·ªØ k√Ω PDF (pyHanko)")
    p.add_argument("--pdf", default=PDF_PATH, help="ƒê∆∞·ªùng d·∫´n file PDF")
    p.add_argument("--cert", default=CERT_PATH, help="ƒê∆∞·ªùng d·∫´n ch·ª©ng ch·ªâ tin c·∫≠y (PEM)")
    p.add_argument("--json", action="store_true", help="Xu·∫•t k·∫øt qu·∫£ ·ªü d·∫°ng JSON")
    p.add_argument("--fetch-revocation", action="store_true", help="Cho ph√©p fetch OCSP/CRL ƒë·ªÉ ki·ªÉm tra revocation")
    return p.parse_args()


def main():
    args = parse_args()
    print("=== KI·ªÇM TRA CH·ªÆ K√ù TRONG FILE PDF ===")
    print(f"File: {args.pdf}")
    pdf_path = args.pdf
    cert_path = args.cert
    output_json = args.json
    allow_fetch = args.fetch_revocation

    # --- Ki·ªÉm tra t·ªìn t·∫°i file ---
    if not os.path.exists(pdf_path):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {pdf_path}")
        exit(1)
    # === 1. ƒê·ªçc PDF ===
    # Keep the file handle open while validating the embedded signature,
    # because EmbeddedPdfSignature instances may access the underlying
    # stream lazily.
    with open(pdf_path, "rb") as f:
        pdf_reader = PdfFileReader(f)
        sig_fields = list(pdf_reader.embedded_signatures)

        if not sig_fields:
            print("‚ùå Kh√¥ng t√¨m th·∫•y ch·ªØ k√Ω n√†o trong file PDF.")
            exit(1)

        print(f"‚úÖ Ph√°t hi·ªán {len(sig_fields)} ch·ªØ k√Ω trong PDF.")

        # === 2. L·∫•y ch·ªØ k√Ω ƒë·∫ßu ti√™n ===
        sig = sig_fields[0]
        sig_name = getattr(sig, "field_name", "UnknownField")

        print(f"üîç ƒêang x√°c minh ch·ªØ k√Ω: {sig_name}")

        # === 3. T·∫°o Validation Context (ch·ª©ng ch·ªâ t·ª± k√Ω) ===
        with open(cert_path, "rb") as cf:
            cert_data = cf.read()

        # Chuy·ªÉn PEM/DER th√†nh ƒë·ªëi t∆∞·ª£ng certificate d√πng asn1crypto
        try:
            if asn1_pem.detect(cert_data):
                _, _, der_bytes = asn1_pem.unarmor(cert_data)
            else:
                der_bytes = cert_data
            cert_obj = asn1_x509.Certificate.load(der_bytes)

            # T·∫°o ValidationContext v·ªõi certificate object
            # allow_fetching enables OCSP/CRL retrieval if requested
            vc = ValidationContext(trust_roots=[cert_obj], allow_fetching=allow_fetch)
        except Exception as e:
            print(f"‚ùå L·ªói khi ƒë·ªçc ch·ª©ng ch·ªâ: {e}")
            exit(1)

        # === 4. X√°c minh ch·ªØ k√Ω ===
        # Note: pyHanko's validate_pdf_signature expects 'signer_validation_context'
        # as the parameter name (not 'validation_context'). Use that to avoid
        # unexpected keyword argument errors against different pyHanko versions.
        status = validate_pdf_signature(sig, signer_validation_context=vc)
        
        # Debug: ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu c·ªßa status v√† c√°c thu·ªôc t√≠nh
        print("\nDEBUG:")
        print(f"Type of status: {type(status)}")
        print(f"Has signed_data: {hasattr(status, 'signed_data')}")
        if hasattr(status, 'signed_data'):
            print(f"Type of signed_data: {type(status.signed_data)}")
            print(f"Has signer_infos: {hasattr(status.signed_data, 'signer_infos')}")
        print(f"Has signer_cert: {hasattr(status, 'signer_cert')}")
        if hasattr(status, 'signer_cert'):
            print(f"Type of signer_cert: {type(status.signer_cert)}")
            if isinstance(status.signer_cert, (bytes, bytearray)):
                print(f"Length of signer_cert bytes: {len(status.signer_cert)}")
                print(f"First few bytes: {status.signer_cert[:20]}")

        # === 5. In k·∫øt qu·∫£ ===
        # pyHanko's status.summary() returns a string; use the status properties
        # (e.g. bottom_line) to determine overall validity.
        valid = bool(getattr(status, 'bottom_line', False))
        if valid:
            print("‚úÖ Ch·ªØ k√Ω H·ª¢P L·ªÜ (VALID).")
        else:
            # Fallback: if summary() reports 'INTACT...' treat as valid
            try:
                summary_str = status.summary()
                if isinstance(summary_str, str) and summary_str.startswith('INTACT'):
                    valid = True
                    print("‚úÖ Ch·ªØ k√Ω H·ª¢P L·ªÜ (VALID).")
                else:
                    print("‚ùå Ch·ªØ k√Ω KH√îNG H·ª¢P L·ªÜ (INVALID).")
            except Exception:
                print("‚ùå Ch·ªØ k√Ω KH√îNG H·ª¢P L·ªÜ (INVALID).")

        print("\n--- Th√¥ng tin ch·ªØ k√Ω ---")
        print(f"T√™n field: {sig_name}")

        # signed_data may be absent depending on the signature type; guard access
        if hasattr(status, 'signed_data') and status.signed_data:
            sd = status.signed_data
            signing_time = getattr(sd, 'signing_time', None)
            if signing_time:
                print(f"Ng√†y k√Ω: {signing_time}")
            else:
                print("Ng√†y k√Ω: (kh√¥ng c√≥ th√¥ng tin)")

            digest_alg = getattr(sd, 'digest_algorithm', None)
            if digest_alg:
                print(f"Thu·∫≠t to√°n hash: {digest_alg}")
            else:
                print("Thu·∫≠t to√°n hash: (kh√¥ng c√≥ th√¥ng tin)")
        else:
            print("Ng√†y k√Ω: (kh√¥ng c√≥ th√¥ng tin)")
            print("Thu·∫≠t to√°n hash: (kh√¥ng c√≥ th√¥ng tin)")
        
        # Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi k√Ω t·ª´ ch·ª©ng ch·ªâ
        signer_cert = None
        
        # Th·ª≠ l·∫•y t·ª´ signer_infos tr∆∞·ªõc (guard signed_data existence)
        if hasattr(status, 'signed_data') and hasattr(status.signed_data, 'signer_infos'):
            signer_infos = list(status.signed_data.signer_infos)
            if signer_infos and hasattr(signer_infos[0], 'signer_cert'):
                signer_cert = signer_infos[0].signer_cert

        # N·∫øu kh√¥ng c√≥, th·ª≠ l·∫•y t·ª´ status.signer_cert
        if signer_cert is None and hasattr(status, 'signer_cert'):
            signer_cert = status.signer_cert

        # X·ª≠ l√Ω ch·ª©ng ch·ªâ n·∫øu c√≥
        if signer_cert is not None:
            # N·∫øu l√† bytes, chuy·ªÉn sang ƒë·ªëi t∆∞·ª£ng asn1crypto certificate
            if isinstance(signer_cert, (bytes, bytearray)):
                try:
                    if asn1_pem.detect(signer_cert):
                        _, _, der_bytes = asn1_pem.unarmor(signer_cert)
                    else:
                        der_bytes = signer_cert
                    signer_cert = asn1_x509.Certificate.load(der_bytes)
                except Exception:
                    signer_cert = None

            # In th√¥ng tin ng∆∞·ªùi k√Ω t·ª´ asn1crypto certificate
            if isinstance(signer_cert, asn1_x509.Certificate):
                try:
                    subject = signer_cert.subject.human_friendly
                    print(f"Ng∆∞·ªùi k√Ω: {subject}")
                except Exception:
                    print(f"Ng∆∞·ªùi k√Ω: {signer_cert.subject}")
            else:
                print("Ng∆∞·ªùi k√Ω: (kh√¥ng ƒë·ªçc ƒë∆∞·ª£c th√¥ng tin)")
        else:
            print("Ng∆∞·ªùi k√Ω: (kh√¥ng c√≥ th√¥ng tin)")
        # In th√™m b√°o c√°o chi ti·∫øt do pyHanko sinh ra
        try:
            print("\n--- Chi ti·∫øt x√°c th·ª±c ---")
            try:
                print(format_pretty_print_details(status))
            except Exception:
                for hdr, body in status.pretty_print_sections():
                    print(hdr)
                    print("-" * len(hdr))
                    print(body)
        except Exception:
            pass

        # Chu·∫©n b·ªã output JSON/exit code
        result = {
            "file": pdf_path,
            "field": sig_name,
            "valid": valid,
            "summary": None,
            "signer_subject": None,
            "signing_time": None,
            "digest_algorithm": None,
            "validation_path": None,
            "revocation": None,
            "coverage": getattr(status, 'coverage', None),
            "modification_level": getattr(status, 'modification_level', None),
        }

        try:
            result["summary"] = status.summary()
        except Exception:
            result["summary"] = None

        # signer subject
        if isinstance(signer_cert, asn1_x509.Certificate):
            try:
                result["signer_subject"] = signer_cert.subject.human_friendly
            except Exception:
                result["signer_subject"] = str(signer_cert.subject)

        # signing_time and digest_algorithm if present
        if hasattr(status, 'signed_data') and status.signed_data:
            sd = status.signed_data
            result["signing_time"] = getattr(sd, 'signing_time', None)
            result["digest_algorithm"] = getattr(sd, 'digest_algorithm', None)

        # validation path if present
        if hasattr(status, 'validation_path') and status.validation_path is not None:
            try:
                result["validation_path"] = [p.subject.human_friendly for p in status.validation_path]
            except Exception:
                result["validation_path"] = None

        # revocation details (best-effort)
        if hasattr(status, 'revocation_details'):
            try:
                result["revocation"] = str(status.revocation_details)
            except Exception:
                result["revocation"] = None

        if output_json:
            print(json.dumps(result, ensure_ascii=False, indent=2, default=str))

        # Exit codes: 0 = valid, 2 = invalid, 1 = runtime error
        exit(0 if valid else 2)


if __name__ == '__main__':
    try:
        main()
    except Exception as e:
        print(f"‚ùå L·ªói khi x√°c minh ch·ªØ k√Ω: {e}")
        raise
